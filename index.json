[{"categories":null,"contents":"In our universe, the books are stars, represented as circles, or nodes.\nConstellations were defined by a curatorial process, and later validated through an analysis of frequency of use of the most common words found in the curatorial labels (excluding articles, prepositions, and so on).\nConstellations are depicted as graphs, or networks, and the relationships between books, that is, the connection between stars, are shown as edges. An edge between stars denotes a similar description based on tags. In a broad sense, the connection between books is a measure of their semantic proximity. A graph-based recommendation algorithm suggested the presence or absence of edges. The location of stars in our universe was obtained by means of a minimization algorithm aiming to locate stars as close as possible, while the crossing of edges was kept as minimal as possible.\nRelated Links:\n Presentation of the project at the John Carter Brown Library Interview for the UNAM newsletter  ","permalink":"https://amigo20th.github.io/publications/constellations/","tags":null,"title":"Constellations: Reimagining Celestial Histories in the Early Americas"},{"categories":null,"contents":"The presentation was made within the Virtual Colloquium of the Mexican Statistical Association (Asociación Mexicana de Estadística, AME) 2020.\nThe main topic of the presentation was the algorithms for the detection of outliers, different approaches were shown for this detection, each approach had its respective examples, which were:\n  Statistical approach: Box-and-Whisker plot and MAD.\n  Density approach: LOF and Isolation Forest.\n  Approach through Machine Learning: Autoencoders and Self-Organizing Maps.\n  ","permalink":"https://amigo20th.github.io/publications/presentacion_ame2020/","tags":null,"title":"Different approaches to the detection of anomalies."},{"categories":null,"contents":"The poster was exhibited within the Fall School in Mathematical Biology (Escuela de Otoño en Biología Matemática, EOBM) 2019 that was assigned to Mérida, Yucatán.\nThe poster shows the results of the application of different methods to detect outliers in a set of vitamin D genes.\nThe dataset only had 3 attributes, which were:\n  Retention intensity of the Vitamin D Receptor (VDR) at 8 hours.\n  Retention intensity of the Vitamin D Receptor (VDR) at 24 hours.\n  Histone count.\n  The results were interesting, the algorithms for the outlier detection showed genes that presented an abnormal VDR clamping intensity at 8 hours and, later, at 24 hours, they normalized.\n","permalink":"https://amigo20th.github.io/publications/poster_bio_mat_19/","tags":null,"title":"Unsupervised Detection of Outliers in In-vitro Cellular Gene Expression Data"},{"categories":null,"contents":"Collaborative research project, this seeks to segment the areas damaged by COVID-19 in images of the lungs. Segmentation will be done through Isolation Forest.\nWhat is sought is to apply an outlier detection method to find the damaged areas in the lung, the purpose is to use a method that is not so computationally expensive and that serves as a guide for experts to perform evaluations more quickly.\nImages of the damaged lungs were obtained by positron emission tomography.\n","permalink":"https://amigo20th.github.io/projects/creations/pulmones_covid_iforest/","tags":null,"title":"Segmentation of areas damaged by COVID-19 through isolation forest in lung images."},{"categories":null,"contents":"In this project we are going to do a logistic regression using a single neuron or also called a perceptron.\nThe data set to be regressed will be based on predictors of divorce.\nThis project was brought into production using Flask, Html, JavaScript, CSS and Heroku.\nNOTE: This project is just for fun.\nLink to page code: https://github.com/amigo20th/Predictor_divorcios_aplicacion\nLink to the perceptron code: https://github.com/amigo20th/Regresion_Logistica_Divorcios\n","permalink":"https://amigo20th.github.io/projects/creations/divorce_prediction_test/","tags":null,"title":"Creation of a divorce prediction test website."},{"categories":null,"contents":"Python implementation of the Eclectic Genetic Algorithm to find the shortest route of 50 cities of the traveling salesman. problem.\n","permalink":"https://amigo20th.github.io/projects/creations/ega_salesman_problem/","tags":null,"title":"Solution to the traveling salesman problem using the Eclectic Genetic Algorithm."},{"categories":null,"contents":"In computer science and operations research, a genetic algorithm (GA) is a metaheuristic inspired by the process of natural selection that belongs to the larger class of evolutionary algorithms (EA). Genetic algorithms are commonly used to generate high-quality solutions to optimization and search problems by relying on biologically inspired operators such as mutation, crossover and selection.[1]\nThis code contains the implementation of a type of genetic algorithm, it is Eclectic Genetic Algorithm EGA[2]. Since an aptitude function has a linear equation, it has 2 equations with 2 variables.\n[1] wikipedia/Genetic_algorithm.\n[2] Kuri, Angel \u0026amp; Quezada, Carlos. (1998). A universal eclectic genetic algorithm for constrained optimization. Proceedings 6th European Congress on Intelligent Techniques \u0026amp; Soft Computing, EUFIT'98.\n","permalink":"https://amigo20th.github.io/projects/creations/ega_linear_equation/","tags":null,"title":"Eclectic Genetic Algorithm [EGA] in Python with application in a linear equation."},{"categories":null,"contents":"Intro Doesn\u0026rsquo;t matter whether it\u0026rsquo;s a CakePHP app for a client, your own personal CMS, or any other web based application. If your passing around passwords or other sensitive info you should really implement SSL. SSL provides 2 main perks to your visitors.\n First it encrypts all communication that flies across the web. This prevents curious or devious billies from getting your secrets. Secondly it ensures to the user that your server is in fact who it claims, and not a nasty \u0026lsquo;man in the middle\u0026quot; attack. Finally it gives your site that touch of class\u0026hellip;. which of course a classy person like yourself relies on.  Once you implement SSL certificates on your server you\u0026rsquo;ll want to require secure connections using Apache\u0026rsquo;s rewrite module. Now I won\u0026rsquo;t dwell on the creation and signing of certificates, its already well documented. If your just starting out though,heres a few links I recommend;\n Creating self-signed certificates (free, but should only be used internally or for testing, users will; see an \u0026lsquo;Untrusted\u0026quot; warning) Requesting a CA Signed certificate (not free, but the final certificate is trusted and seamless for users)  The second link uses the schools internal CA, you will need to pay a public CA like Entrust or Verisign. All of this information is aimed at \u0026lsquo;nix or solaris servers running apache. Why? cause a production windows server is laughable :-p\nNow that you have a certificate, whats next? So there you are you have a shiny new Certificate and Server key, how do you force visitors to your apache driven site to use the SSL? You copied the certificates into the appropite locations right? And you have made the needed changes in httpd.conf right? So now when you view https://example.com you see a \u0026lsquo;trusted\u0026rsquo; warning or your site right? If No to any of these than this article does a pretty good job of outlining those steps.\nThe SSL Works, How do I force connections to use it? First you need to decide if you want to force every page on your site to use SSL, or only a particular sub-domain, or maybe just your admin directory. Since the overhead is minimal there is no harm is forcing the entire domain to leverage SSL, but if it is a self-signed certificate for your personal use than you\u0026rsquo;ll most certainly want to restrict its use to your own areas. This prevents users from seeing that nasty warning \u0026ldquo;This server is not trusted\u0026rdquo; You\u0026rsquo;ll know if your using SSL because the url prefix changes from http to https (s for secure).\nForcing entire domain to use SSL You want any visit, any where to use ssl. This probably the simplest solution. Create or append to your htaccess file in the top directory of your server. Some people use a port check (80 is typically http, while 443 is https) but if you have alernate configs or the user just adds :8080 to the end of the url this method is useless. Instead check whether the https environmental variable is set, if not then redirect.\nRewriteCond %{HTTPS} !=on RewriteRule ^(.*)$ https://%{SERVER_NAME}$1 \\[R,L\\] Forcing sub-domains to use SSL Maybe you only want mysecretarea.example.com to use SSL, that\u0026rsquo;s easy enough. Its the same premise as above, but you move the htaccess file into the directory that corresponds to the subdomain. Also change the second line like below;\nRewriteCond %{HTTPS} !=on RewriteRule ^(.*)$ https://mysecretarea.%{SERVER_NAME}$1 \\[R,L\\] Forcing a directory to use SSL This method cn get a little hairier if your using aliases or redirects on top of this one. You\u0026rsquo;ll need to consider what order the commands are read. The basic principle is like so. You want all visits to example.com/admin to use ssl. Create a htaccess file in the parent directory. Again will check for the https variable, but this time we also check for the sub-directory to be in the path.\nRewriteCond %{HTTPS} !=on RewriteRule ^/admin/(.*)$ https://%{SERVER_NAME}/admin/$1 \\[R,L\\] ","permalink":"https://amigo20th.github.io/blog/force-ssl/","tags":["apache","apache","redirect","rewrite","ssl","web development"],"title":"Forcing Visits to use SSL"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;] Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n... \u0026#34;contents\u0026#34;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026#34;tags\u0026#34;:{{ .Params.tags | jsonify }}{{end}}, \u0026#34;categories\u0026#34; : {{ .Params.categories | jsonify }}, ... Edit fuse.js options to Search static/js/search.js\nkeys: [ \u0026#34;title\u0026#34;, \u0026#34;contents\u0026#34;, \u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34; ] ","permalink":"https://amigo20th.github.io/search/","tags":null,"title":"Search Results"}]